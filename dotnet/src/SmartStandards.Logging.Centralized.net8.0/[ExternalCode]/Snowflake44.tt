<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 

string ttVersion = "1.0.0";

string projectUrl = "https://github.com/SmartStandards/Snowflake44";

string repositoryRootUrl = "https://raw.githubusercontent.com/SmartStandards/Snowflake44/refs/heads/master/dotnet/";

string[] fileDownloadUrls = new string[] {

  "src/Snowflake44/System/SmartStandards/Snowflake44.cs"

};

string content;

string currentFileUrl = "";

try {

  StringBuilder aggregatedContent = new StringBuilder(10000);

  List<string> usings = new List<string>();

  aggregatedContent.AppendLine();
  aggregatedContent.AppendLine("// This is a partial copy of the SmartStandards Logging Library.");
  aggregatedContent.AppendLine("// It is intended to be used as an alternative when including the NuGet package is not feasible.");
  aggregatedContent.AppendLine("// It offers reduced features: There is no custom routing, emitted log events always flow to the TraceBus.");
  aggregatedContent.AppendLine();
  aggregatedContent.Append("// This file was generated by SmartStandards.Logging.tt v ");
  aggregatedContent.Append(ttVersion);
  aggregatedContent.Append(" at ");
  aggregatedContent.AppendLine(DateTime.Now.ToShortDateString());
  aggregatedContent.Append("// Included sources were downloaded from: ");
  aggregatedContent.AppendLine(projectUrl);

  foreach (string fileDownloadUrl in fileDownloadUrls) {

    using (var wc = new System.Net.WebClient()) {

      currentFileUrl = repositoryRootUrl + fileDownloadUrl;

      string fileContent = wc.DownloadString(currentFileUrl);

      using (TextReader reader = new StringReader(fileContent)) {

        string currentLine = reader.ReadLine();

        aggregatedContent.AppendLine();
        aggregatedContent.Append("// Taken from File: ");
        aggregatedContent.AppendLine(currentFileUrl);
        aggregatedContent.AppendLine();

        bool withinConditionalT4IfBlock = false;
        bool withinConditionalT4ElseBlock = false;
        bool beforeNamespace = true;

        while (currentLine != null) {
          if (withinConditionalT4IfBlock && currentLine.StartsWith("#else")) {
            withinConditionalT4ElseBlock = true;
          } else if (withinConditionalT4IfBlock && currentLine.StartsWith("#endif")) {
            withinConditionalT4IfBlock = false;
            withinConditionalT4ElseBlock = false;
          } else if (currentLine.StartsWith("#if !UsedByT4")) {
            withinConditionalT4IfBlock = true;
          } else if (withinConditionalT4IfBlock && !withinConditionalT4ElseBlock) {
            // skip
          } else if (currentLine.StartsWith("[assembly:")) {
            // skip
          } else if (currentLine.StartsWith("using ")) {
            usings.Add(currentLine);
          } else if (currentLine.StartsWith("namespace ")) {
            beforeNamespace = false;
            aggregatedContent.AppendLine(currentLine);
          } else if (beforeNamespace && String.IsNullOrWhiteSpace(currentLine)) {
            // skip          
          } else {
            aggregatedContent.AppendLine(currentLine);
          }
          currentLine = reader.ReadLine();
        } // wend
      } // using TextReader
    } // using WebClient
  } // next fileDownloadUrl

  aggregatedContent = aggregatedContent.Replace("partial class ", "class ");
  aggregatedContent = aggregatedContent.Replace("public class ", "internal class ");
  aggregatedContent = aggregatedContent.Replace("public static class ", "\n  internal static class ");
  aggregatedContent = aggregatedContent.Replace("public interface ", "\n  internal interface ");
  aggregatedContent = aggregatedContent.Replace("public static interface ", "internal static interface ");
  aggregatedContent = aggregatedContent.Replace("public enum ", "internal enum ");
  aggregatedContent = aggregatedContent.Replace("class ", "partial class ");
  aggregatedContent = aggregatedContent.Replace("partial partial ", "partial ");

  // usings
  
  IEnumerable<string> sanitizedUsings = usings.Distinct().OrderBy((u)=>u);
  aggregatedContent.Insert(0, string.Join("\r\n", sanitizedUsings) + "\r\n");
  aggregatedContent.ToString();

  content = aggregatedContent.ToString();
} catch (Exception ex) {
  content = "Error Processing '" + currentFileUrl + "': " + ex.Message;
}
#><#= content #>
